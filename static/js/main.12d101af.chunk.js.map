{"version":3,"sources":["components/Popup.js","components/MapChart.js","data/owid-co2-data.csv","components/YearSlider.js","components/utils/Modal.js","components/Detail.js","components/utils/Spinner.js","App.js","index.js"],"names":["Popup","name","info","co2","className","React","memo","MapChart","setTooltipContent","data","year","setShow","setCountry","colorscale","useMemo","scaleLinear","domain","range","data-tip","projectionConfig","scale","geography","geographies","map","geo","properties","NAME","iso","country","endYear","length","countryInTargetYear","parseInt","getInfo","ISO_A3","share_global","onMouseEnter","onMouseLeave","onClick","style","default","fill","outline","hover","cursor","pressed","rsmKey","YearSlider","setYear","Grid","container","spacing","direction","justify","alignItems","item","xs","Slider","value","min","step","max","onChange","event","newValue","valueLabelDisplay","aria-labelledby","Modal","props","handleClose","show","children","showHideClassName","type","Detail","useState","setInfo","selected","setSelected","useEffect","time","targetYearPosition","getInfoByYear","showInfo","e","target","find","slice","reverse","element","Object","keys","values","Spinner","width","height","CircularProgress","color","App","loading","setLoading","content","setContent","setData","handleCSV","useCallback","file","dataListByISO","csv","then","iso_code","push","csvData","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.12d101af.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../style/popup.scss\";\n\nfunction Popup({ name, info }) {\n  // if info empty, return error message\n  return info && info.co2 ? (\n    <div>\n      <p className=\"popup-country\">\n        {name} (Year: {info[\"year\"]})\n      </p>\n      <p className=\"popup-co2 color-secondary\">\n        <span className=\"color-white\">CO2 (million tonnes): </span>\n        <span className=\"font-bold\">{info[\"co2\"]}</span>\n      </p>\n      <p className=\"popup-average color-secondary\">\n        <span className=\"color-white\">\n          Cumulative CO2 (million tonnes):&nbsp;\n        </span>\n        <span className=\"font-bold\">{info[\"cumulative_co2\"]}</span>\n      </p>\n      <p className=\"popup-moreInfo\">\n        Click For Details <span className=\"popup-enter\">&#8594;</span>\n      </p>\n    </div>\n  ) : (\n    <div className=\"color-red font-bold\">\n      <p className=\"popup-country color-white\">{name}</p>\n      Sorry, we do not have information for this area!!\n    </div>\n  );\n}\n\nexport default React.memo(Popup);\n","import React, { useMemo } from \"react\";\nimport {\n  ZoomableGroup,\n  ComposableMap,\n  Geographies,\n  Geography,\n} from \"react-simple-maps\";\nimport Popup from \"./Popup\";\nimport { scaleLinear } from \"d3-scale\";\n\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\n// add color scale\nconst getColorScale = () => {\n  return scaleLinear().domain([0, 30]).range([\"#ffedea\", \"#ff5233\"]);\n};\n\nconst MapChart = ({ setTooltipContent, data, year, setShow, setCountry }) => {\n  const getInfo = (iso) => {\n    // if data exsit, get info\n    if (data[iso]) {\n      const country = data[iso];\n      // locat the position of specific year by using math approach so we have O(1), we can also use find method but speed is O(n).\n      // [1990, 1991, .....2018]\n      const endYear = country[country.length - 1].year;\n      const targetYearPosition =\n        country.length - 1 - (parseInt(endYear) - year);\n      const countryInTargetYear = country[targetYearPosition];\n      if (parseInt(countryInTargetYear?.year) === year) {\n        const res = countryInTargetYear ? countryInTargetYear : \"\";\n        return res;\n      }\n    }\n    return \"\";\n  };\n\n  const colorscale = useMemo(() => getColorScale(year), [year]);\n  return (\n    <>\n      <ComposableMap data-tip=\"\" projectionConfig={{ scale: 200 }}>\n        <ZoomableGroup>\n          <Geographies geography={geoUrl}>\n            {({ geographies }) =>\n              geographies.map((geo) => {\n                const { NAME, ISO_A3 } = geo.properties;\n                const info = getInfo(ISO_A3);\n                const share_global = info[\"share_global_co2\"];\n                return (\n                  <Geography\n                    key={geo.rsmKey}\n                    geography={geo}\n                    onMouseEnter={() => {\n                      setTooltipContent(<Popup name={NAME} info={info} />);\n                    }}\n                    onMouseLeave={() => {\n                      setTooltipContent(\"\");\n                    }}\n                    onClick={() => {\n                      setCountry(data[geo.properties.ISO_A3]);\n                      setShow(true);\n                    }}\n                    style={{\n                      default: {\n                        fill: share_global\n                          ? colorscale(share_global)\n                          : \"#D6D6DA\",\n                        outline: \"1px\",\n                      },\n                      hover: {\n                        fill: \"#F53\",\n                        outline: \"none\",\n                        cursor: \"pointer\",\n                      },\n                      pressed: {\n                        fill: \"blue\",\n                        outline: \"none\",\n                      },\n                    }}\n                  />\n                );\n              })\n            }\n          </Geographies>\n        </ZoomableGroup>\n      </ComposableMap>\n    </>\n  );\n};\n\nexport default React.memo(MapChart);\n","export default __webpack_public_path__ + \"static/media/owid-co2-data.3a5b3cc7.csv\";","import React from \"react\";\nimport \"../style/yearSlider.scss\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Grid from \"@material-ui/core/Grid\";\n\nfunction YearSlider({ setYear, year }) {\n  const handleChange = (event, newValue) => {\n    setYear(newValue);\n  };\n\n  return (\n    <div className=\"yearSlider\">\n      <Grid\n        container\n        spacing={2}\n        direction=\"row\"\n        justify=\"center\"\n        alignItems=\"center\"\n      >\n        <Grid item>1990</Grid>\n        <Grid item xs>\n          <Slider\n            value={year}\n            min={1990}\n            step={1}\n            max={2018}\n            onChange={handleChange}\n            valueLabelDisplay=\"auto\"\n            aria-labelledby=\"non-linear-slider\"\n          />\n        </Grid>\n        <Grid item>2018</Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default React.memo(YearSlider);\n","import React from \"react\";\nimport \"../../style/modal.scss\";\n\nfunction Modal(props) {\n  const { handleClose, show, children } = props;\n  const showHideClassName = show ? \"modal display-block\" : \"modal display-none\";\n  return (\n    <div className={showHideClassName}>\n      <section className=\"modal-main\">\n        <button type=\"button\" onClick={handleClose} className=\"modal-close\">\n          X\n        </button>\n        {children}\n      </section>\n    </div>\n  );\n}\n\nexport default Modal;\n","import React, { useState, useEffect } from \"react\";\nimport \"../style/detail.scss\";\n\nfunction Detail({ data, year }) {\n  const [info, setInfo] = useState({});\n  const [selected, setSelected] = useState(\"\");\n  useEffect(() => {\n    const getInfoByYear = (time) => {\n      // make sure we have the data\n      if (data && data[0]) {\n        // get current year info\n        const endYear = data[data.length - 1].year;\n        const targetYearPosition = data.length - 1 - (parseInt(endYear) - time);\n        const countryInTargetYear = data[targetYearPosition];\n        if (parseInt(countryInTargetYear?.year) === time) {\n          const res = countryInTargetYear ? countryInTargetYear : \"\";\n          setInfo(res);\n          setSelected(year);\n        }\n      }\n    };\n    getInfoByYear(year);\n  }, [data, year]);\n\n  const handleChange = (e) => {\n    const value = e.target.value;\n    setSelected(value);\n    setInfo(data.find((e) => e.year === value));\n  };\n\n  // show the details, we can add more details by add items to array\n  const showInfo = [\n    { \"CO2 (million tonnes)\": info[\"co2\"] },\n    { \"Cumulative CO2 (million tonnes)\": info[\"cumulative_co2\"] },\n    { \"Coal CO2 (million tonnes)\": info[\"coal_co2\"] },\n    { \"Gas CO2 (million tonnes)\": info[\"gas_co2\"] },\n    { \"Oil CO2 (million tonnes)\": info[\"oil_co2\"] },\n    { \"Trade CO2 (million tonnes)\": info[\"trade_co2\"] },\n    { \"Share Global CO2 (%)\": info[\"share_global_co2\"] },\n    {\n      \"Share Global Cumulative CO2 (%)\": info[\"share_global_cumulative_co2\"],\n    },\n  ];\n  // if data empty or undefined return error message\n  return info[\"co2\"] && data ? (\n    <div className=\"detail\">\n      <div>\n        <h1 className=\"detail-title\">{info.country} </h1>\n        <p className=\"detail-subheader\">Year of {selected}</p>\n        <select\n          className=\"detail-select\"\n          onChange={handleChange} // filter data by year\n          value={selected}\n        >\n          <option type=\"text\" value={year}>\n            Select Year\n          </option>\n          {/* make copy of data and map the selections in reverse order */}\n          {data\n            ?.slice(0)\n            .reverse()\n            .map((element) => (\n              <option value={element.year} key={element.year}>\n                {element.year}\n              </option>\n            ))}\n        </select>\n        <div>\n          <ul className=\"detail-list\">\n            {showInfo.map((e) => (\n              <li className=\"detail-list-item\" key={Object.keys(e)}>\n                {Object.keys(e)}:{\" \"}\n                <span className=\"color-green\">{Object.values(e)}</span>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    </div>\n  ) : (\n    <div className=\"detail-no-info\">\n      Sorry, we do not have information for this area!!\n    </div>\n  );\n}\n\nexport default React.memo(Detail);\n","import React from \"react\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nfunction Spinner({ width, height }) {\n  return (\n    <div className=\"spinner\">\n      <CircularProgress\n        style={{ width, height }}\n        color=\"secondary\"\n      />\n    </div>\n  );\n}\n\nexport default Spinner;\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport ReactTooltip from \"react-tooltip\";\nimport { csv } from \"d3\";\nimport \"./style/topology.scss\";\nimport MapChart from \"./components/MapChart\";\nimport csvData from \"./data/owid-co2-data.csv\";\nimport YearSlider from \"./components/YearSlider\";\nimport Modal from \"./components/utils/Modal\";\nimport Detail from \"./components/Detail\";\nimport Spinner from \"./components/utils/Spinner\";\n\n// I did not forget to remove comments!!!!!.\n// Comments should be remove before deploy or by webpack.\n// For better understanding, I keep comments on purpose.\n\nfunction App() {\n  const [loading, setLoading] = useState(true);\n  const [content, setContent] = useState(\"\");\n  const [data, setData] = useState({});\n  const [year, setYear] = useState(2004);\n  const [show, setShow] = useState(false);\n  const [country, setCountry] = useState([]);\n\n  // import csv file and rebuild the data structure (since json file is too large)\n  // useCallback to memorize the results\n  const handleCSV = useCallback((file) => {\n    let dataListByISO = {};\n    csv(file)\n      .then((data) => {\n        for (let element of data) {\n          let name = element.iso_code;\n          if (dataListByISO[name]) {\n            dataListByISO[name].push(element);\n          } else {\n            dataListByISO[name] = [element];\n          }\n        }\n      })\n      .then(() => {\n        setData(dataListByISO);\n        setLoading(false);\n      });\n  }, []);\n\n  // get data when component did mount\n  useEffect(() => {\n    handleCSV(csvData);\n  }, [handleCSV]);\n\n  // Loading spinner\n  return loading ? (\n    <Spinner width={\"100px\"} height={\"100px\"} />\n  ) : (\n    <div className=\"App\">\n      <h1 className=\"text-center\">CO2 Emission By Year 1981</h1>\n      <YearSlider year={year} setYear={setYear} />\n      <MapChart\n        setTooltipContent={setContent}\n        data={data}\n        year={year}\n        setShow={setShow}\n        setCountry={setCountry}\n      />\n      <ReactTooltip>{content}</ReactTooltip>\n      <Modal handleClose={() => setShow(false)} show={show}>\n        <Detail data={country} year={year} />\n      </Modal>\n    </div>\n  );\n}\n\nexport default React.memo(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}